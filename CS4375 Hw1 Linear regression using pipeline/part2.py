# -*- coding: utf-8 -*-
"""part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eNUnVnCYQyqnGYGletOY8s2ojFmedZxP
"""

import pandas as pd
import numpy as np
import math as m
from sklearn.linear_model import SGDRegressor
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plot
from sklearn.metrics import mean_squared_error

learningRate = 1e-3
max_iterations = 1000
train_test_ratio = .9

df_pd = pd.read_excel("https://archive.ics.uci.edu/ml/machine-learning-databases/00477/Real%20estate%20valuation%20data%20set.xlsx",).dropna()

dtr_pd = df_pd.iloc[:m.ceil(len(df_pd.index)*train_test_ratio), [2,3,4]]

dtr = dtr_pd.to_numpy()

dte_pd = df_pd.iloc[len(dtr):,[2,3,4]]

dte = dte_pd.to_numpy()

ytr_pd = df_pd.iloc[:m.ceil(len(df_pd.index)*train_test_ratio),[7]]

ytr = ytr_pd.to_numpy()

yte_pd = df_pd.iloc[len(dtr):,[7]]

yte = yte_pd.to_numpy()

reg = make_pipeline(StandardScaler(), SGDRegressor(max_iter=max_iterations, tol=1e-2,learning_rate='constant', eta0=learningRate))

reg.fit(dtr, np.ravel(ytr))

reg.get_params(deep=True)

pred_y = reg.predict(dte)

R2 = reg.score(dte, yte)
print('R^2: ',R2)

MSE = mean_squared_error(yte, pred_y)
print('MSE of y actual and y predicted: ',MSE)

plot.scatter(yte,pred_y)
plot.grid()
plot.xlabel('yte')
plot.ylabel('pred_y')
plot.title('yte vs pred_y')
plot.show()

