# -*- coding: utf-8 -*-
"""part1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10vqVQ4rRohHO0ZLph7Sh5WDncyN8r73Z
"""

import pandas as pd
import numpy as np
import math as m
import matplotlib.pyplot as plot

learning_rate = .0000001
max_iter = 10000
train_test_ratio = .8

df_pd = pd.read_excel("https://archive.ics.uci.edu/ml/machine-learning-databases/00477/Real%20estate%20valuation%20data%20set.xlsx",).dropna()
#df_pd.head()

df = df_pd.iloc[:, [2,3,4]].to_numpy(dtype= 'float')

y = df_pd.iloc[:,[7]].to_numpy(dtype= 'float')

dtr_pd = df_pd.iloc[:m.ceil(len(df_pd.index)*train_test_ratio), [2,3,4]]

dtr = dtr_pd.to_numpy(dtype= 'float')

ytr_pd = df_pd.iloc[:m.ceil(len(df_pd.index)*train_test_ratio),[7]]

ytr = ytr_pd.to_numpy(dtype= 'float')

W = np.random.randn(1,dtr.shape[1])
print('W initial', W)

MSE_log = np.zeros((max_iter,1))

#training
for i in range(max_iter):
  MSE = np.square((np.dot(dtr,W.T) - ytr)).sum(axis = 0)/(2*len(ytr))
  MSE_log[i] = MSE
  col = W.shape[1]
  for j in range(col):
    dervMSE = np.dot((np.dot(dtr,W.T) - ytr).T, dtr[:, j])/(len(dtr))
    W[:,j] = W[:,j] - learning_rate*dervMSE
MSE = np.square((np.dot(dtr,W.T) - ytr)).sum(axis = 0)/(2*len(ytr))
print('MSE final of testing data set: ', MSE)
print('W final: ',W)

dte_pd = df_pd.iloc[len(dtr):,[2,3,4]]

dte = dte_pd.to_numpy()

yte_pd = df_pd.iloc[len(dtr):,[7]]

yte = yte_pd.to_numpy()

#testing
pred = np.dot(dte,W.T)
MSE = np.square((np.dot(dte,W.T) - yte)).sum(axis = 0)/(2*len(yte))
print('MSE of testing data set: ',MSE)

a = np.array(np.arange(max_iter).reshape(max_iter,1))
plot.scatter(a,MSE_log)
plot.grid()
plot.xlabel('iterations')
plot.ylabel('MSE')
plot.title('iterations vs MSE during training')
plot.show()

plot.scatter(yte,pred)
plot.grid()
plot.xlabel('Y house price of unit area')
plot.ylabel('predicted y')
plot.title('Y house price of unit area vs predicted y')
plot.show()

plot.scatter(df[:,0],y)
plot.grid()
plot.xlabel('X2 house age')
plot.ylabel('Y house price of unit area')
plot.title('X2 house age vs Y house price of unit area')
plot.show()

plot.scatter(df[:,1],y)
plot.grid()
plot.xlabel('X3 distance to the nearest MRT station')
plot.ylabel('Y house price of unit area')
plot.title('X3 distance to the nearest MRT station vs Y house price of unit area')
plot.show()

plot.scatter(df[:,2],y)
plot.grid()
plot.xlabel('X4 number of convenience stores')
plot.ylabel('Y house price of unit area')
plot.title('X4 number of convenience stores vs Y house price of unit area')
plot.show()

